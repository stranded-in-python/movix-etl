#!/bin/bash

set -o errexit
set -o pipefail
set -o nounset



if [ -z "${POSTGRES_USER}" ]; then
    base_postgres_image_default_user='postgres'
    export POSTGRES_USER="${base_postgres_image_default_user}"
fi

postgres_ready() {
python << END
import sys

import psycopg2

try:
    psycopg2.connect(
        dbname="${POSTGRES_DB}",
        user="${POSTGRES_USER}",
        password="${POSTGRES_PASSWORD}",
        host="${POSTGRES_HOST}",
        port="${POSTGRES_PORT}",
    )
except psycopg2.OperationalError:
    sys.exit(-1)
sys.exit(0)

END
}

elastic_ready() {
python << END
import sys
import requests

elastic_server = '${ELASTIC_ENDPOINT}'
url = f'{elastic_server}/_cluster/health'
try:
    response = requests.get(url)
    if response.ok:
        sys.exit(0)
    else:
        sys.exit(-1)
except requests.exceptions.RequestException as e:
  sys.exit(-1)
END
}

django_ready() {
python << END
import sys
import requests

url = '${DJANGO_ENDPOINT}/admin/'
try:
    response = requests.get(url)
    if response.ok:
        sys.exit(0)
    else:
        sys.exit(-1)
except requests.exceptions.RequestException as e:
  sys.exit(-1)
END
}

until postgres_ready; do
  >&2 echo 'Waiting for PostgreSQL to become available...'
  sleep 1
done
>&2 echo 'PostgreSQL is available'

until elastic_ready; do
  >&2 echo 'Waiting for ElasticSearch to become available...'
  sleep 1
done
>&2 echo 'ElasticSearch is available'

until django_ready; do
  >&2 echo 'Waiting for Django to become available...'
  sleep 3
done
>&2 echo 'ElasticSearch is available'

exec "$@"
